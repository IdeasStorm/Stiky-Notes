'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On


Namespace My
    
    'NOTE: This file is auto-generated; do not modify it directly.  To make changes,
    ' or if you encounter build errors in this file, go to the Project Designer
    ' (go to Project Properties or double-click the My Project node in
    ' Solution Explorer), and make changes on the Application tab.
    '
    Partial Friend Class MyApplication
        Private notes As New Generic.List(Of Note)
        Private reader As IO.BinaryReader
        ReadOnly statefile As String = Info.DirectoryPath & "\State.Dat"

        <Global.System.Diagnostics.DebuggerStepThroughAttribute()> _
        Public Sub New()
            MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)
            Me.IsSingleInstance = True
            Me.EnableVisualStyles = True
            Me.SaveMySettingsOnExit = True
            Me.ShutdownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterAllFormsClose
        End Sub
        
        <Global.System.Diagnostics.DebuggerStepThroughAttribute()> _
        Protected Overrides Sub OnCreateMainForm()
            Me.load()
        End Sub
        Public Function CreateNote() As Note
            Dim myform As Note = New Note
            notes.Add(myform)
            Return myform
        End Function
        Public Sub RemoveNote(ByRef nt As Note)
            Notes.Remove(nt)
            nt.Close()
            nt.Dispose()
        End Sub

        Public Sub save()
            Dim state As New IO.FileStream(Info.DirectoryPath & "\State.Dat", IO.FileMode.Create, IO.FileAccess.Write)
            Dim writer As New IO.BinaryWriter(state)
            writer.Write(128)
            writer.Write(notes.Count)
            For Each nt As Note In notes
                SaveNote(nt, writer)
            Next
            writer.Close()
        End Sub
        Sub SaveNote(ByRef nt As Note, ByRef writer As IO.BinaryWriter)
            With writer
                .Write(nt.Content)
                .Write(nt.ContentFont.Name)
                .Write(nt.ContentFont.Size)
                .Write(CInt(nt.ContentFont.Style))
                .Write(nt.ContentFore.ToArgb)
                .Write(nt.ContentBack.ToArgb)
                .Write(nt.tmOpacity)
                .Write(nt.TopMost)
                .Write(Not nt.txtMain.ReadOnly)
                .Write(nt.Width)
                .Write(nt.Height)
                .Write(nt.Left)
                .Write(nt.IsHide)
                .Write(nt.Top)
                '.Write(nt.ShowButtonToolStripMenuItem.Checked)
            End With
        End Sub

        Private Sub load()

            If Not IO.File.Exists(statefile) Then
                Microsoft.VisualBasic.FileOpen(FreeFile, statefile, OpenMode.Output, OpenAccess.Write)
                Microsoft.VisualBasic.FileClose()
            End If
            Dim state As New IO.FileStream(statefile, IO.FileMode.Open, IO.FileAccess.Read)
            Dim reader As New IO.BinaryReader(state)
            Dim mCount As Integer
            Me.MainForm = Me.CreateNote
            'CType(MainForm, Note).txtMain.Text = "that's it 2"
            If state.Length > 0 AndAlso reader.ReadInt32 = 128 Then
                mCount = reader.ReadInt32
                loadNote(CType(Me.MainForm, Note), reader)
            End If
            For i As Integer = 2 To mCount
                Dim mnt As Note = Me.CreateNote
                loadNote(mnt, reader)

            Next
            reader.Close()

        End Sub
        Sub loadNote(ByRef Mynote As Note, ByRef reader As IO.BinaryReader)
            Mynote.Content = reader.ReadString
         
            Dim FontName As String = reader.ReadString
            Dim ems As Single = reader.ReadSingle
            Dim stl As FontStyle = CType(reader.ReadInt32, FontStyle)
            Mynote.ContentFont = New Font(FontName, ems, stl)
            Mynote.ContentFore = Color.FromArgb(reader.ReadInt32)
            Mynote.ContentBack = Color.FromArgb(reader.ReadInt32)
            Mynote.Opacity = reader.ReadDouble
            Mynote.TopMost = reader.ReadBoolean
            Mynote.AlwaysOnTopToolStripMenuItem.Checked = Mynote.TopMost
            Mynote.txtMain.ReadOnly = Not reader.ReadBoolean
            Mynote.tEna.Checked = Not Mynote.txtMain.ReadOnly
            Mynote.Width = reader.ReadInt32
            Mynote.Height = reader.ReadInt32
            Mynote.Button1.Height = Mynote.Height - Mynote.pnl1.Height - Mynote.tb1.Height - Mynote.Button2.Height - Mynote.Button2.Height + 10
            Mynote.Show()
            Mynote.Left = reader.ReadInt32
            Mynote.Button1.Visible = reader.ReadBoolean
            Mynote.Button2.Visible = Mynote.Button1.Visible
            Mynote.Button3.Visible = Mynote.Button1.Visible
            Mynote.IsHide = Mynote.Button1.Visible
            Mynote.ShowButtonToolStripMenuItem.Checked = Mynote.Button1.Visible
            If Mynote.ShowButtonToolStripMenuItem.Checked Then
                Mynote.txtMain.Width -= Mynote.Button1.Width
                Mynote.txtMain.Left = Mynote.Button1.Width
            Else
                Mynote.txtMain.Width = Mynote.Width
                Mynote.txtMain.Left = 0
            End If
            If Mynote.Button1.Visible Then
                Mynote.Button1.Text = "<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<"
            End If
            Mynote.Top = reader.ReadInt32

        End Sub

        Private Sub MyApplication_Shutdown(ByVal sender As Object, ByVal e As System.EventArgs) Handles Me.Shutdown
            If notes.Count = 0 Then
                IO.File.Create(statefile)
            End If
        End Sub
    End Class
End Namespace
